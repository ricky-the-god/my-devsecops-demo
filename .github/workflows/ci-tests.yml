name: CI - Build & Test (.NET)

# == Quand déclencher le workflow ==
on:
  push:
    branches: [ "main" ]        # à chaque push sur main
  pull_request:
    branches: [ "main" ]        # et sur chaque PR qui cible main
  workflow_dispatch:             # bouton "Run workflow" manuel dans l'UI

# == Évite d'empiler des runs si tu pushes en rafale ==
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest       # machine fournie par GitHub (Linux)
    timeout-minutes: 15

    steps:
      # 1) Récupérer le code
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Installer le SDK .NET
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x              # cible ton projet net9.0
          cache: true          # active le cache NuGet auto

      # 3) Restore des dépendances
      - name: Restore
        run: dotnet restore

      # 4) Build en Release
      - name: Build
        run: dotnet build --no-restore -c Release

      # 5) Tests unitaires (avec logs TRX)
      - name: Test
        run: dotnet test MyDevSecOpsDemo.Tests/MyDevSecOpsDemo.Tests.csproj --no-build -c Release --logger "trx;LogFileName=test_results.trx"

      # 6) (Optionnel) Publier les résultats de tests comme artefacts
      - name: Upload test results
        if: always() 
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: MyDevSecOpsDemo.Tests/TestResults/*.trx
